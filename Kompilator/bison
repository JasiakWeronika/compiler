%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#define YYERROR_VERBOSE

extern int yylineno;
extern char *yytext;

int yylex(void);
void yyerror(char const *, ...);
void yyerror2(const char *fmt);
void yyset_in(FILE *in_str);

struct Deklaracja {
	char *Id;
	int Typ;
	long long Pozycja;
	long long Od;
	long long Rozmiar;
	int Inicjowana;
	struct Deklaracja *Next;
};

struct Zmienna {
	char *Id;
	int Typ;
	int Linia;
	struct Zmienna *Element;
};

struct Warunek {
	int Typ;
	struct Zmienna *Z0;
	struct Zmienna *Z1;
};

struct Wyrazenie {
	int Typ;
	struct Zmienna *Z0;
	struct Zmienna *Z1;
};

struct Komenda {
	int Typ;
	struct Zmienna *Z0;
	struct Zmienna *Z1;
	struct Zmienna *Z2;
	struct Warunek *Wa;
	struct Wyrazenie *Wy;
	struct Komenda *K0;
	struct Komenda *K1;
	struct Komenda *Next;
};

struct Linia {
	char *Tekst;
	struct Linia *Next;
};

struct KolejkaLinia {
	long long Rozmiar;
	struct Linia *First;
	struct Linia *Last;
};

static int LiczbaPetli = 0;
static int AktualneZagniezdzenie = 0;
static int PamiecNaObliczenia = 6;
static struct Deklaracja *Dek = NULL;
static struct KolejkaLinia *Kol = NULL;
FILE *dataToSave;

int Deklaruj(int typ, char *id, long long rozmiar);
int DeklarujTab(int typ, char *id, long long rod, long long rdo);
int DeklarujFor(char *id);
void UsunDeklaracjeFor(char *id);
struct Deklaracja *SzukajDeklaracji(char *id);
struct Zmienna *GenerujZmienna(int typ, char *id, struct Zmienna *element, int linia);
struct Warunek *GenerujWarunek(int typ, struct Zmienna *z0, struct Zmienna *z1);
struct Wyrazenie *GenerujWyrazenie(int typ, struct Zmienna *z0, struct Zmienna *z1);
struct Komenda *GenerujKomende(int typ, struct Zmienna *z0, struct Zmienna *z1, struct Zmienna *z2, struct Wyrazenie *wy, struct Warunek *wa, struct Komenda *k0, struct Komenda *k1);
int Sprawdz(struct Komenda *k);
void Kompiluj(struct Komenda *k);
%}

%union {
	char *id;
	struct Zmienna *zmi;
	struct Warunek *war;
	struct Wyrazenie *wyr;
	struct Komenda *kom;
}

%type <zmi> identifier
%type <kom> command
%type <kom> commands
%type <kom> program
%type <wyr> expression
%type <zmi> value
%type <war> condition

%token _declare _in _end
%token _if _then _else _endif
%token _while _do _endwhile _enddo
%token _for _from _to _downto _endfor
%token _read _write
%token _odd _sre _prz
%token _dod _ode _mno _dzi _mod
%token _row _roz _mni _wie _nwi _nmn
%token _na0 _na1
%token <id> number
%token <id> pidentifier

%%
input:
	program
	{
		Kompiluj($1);
	}
program:
	_declare declarations _in commands _end
	{
		if(Sprawdz($4) != 0) {
			return -1;
		}
		$$ = $4;
	}
declarations:
	declarations pidentifier _sre
	{
		if(Deklaruj(0, $2, 0) != 0) {
			char mess[1000];
			sprintf(mess, "druga deklaracja %s", $2);
		 	yyerror2(mess);
		 	YYERROR;
		}
	}
	| declarations pidentifier _na0 number _odd number _na1 _sre
	{
		char mess[1000];
		switch(DeklarujTab(1, $2, atoll($4), atoll($6))) {
			case -1:
				sprintf(mess, "druga deklaracja %s", $2);
				yyerror2(mess);
				YYERROR;
				break;
			case -2:
				sprintf(mess, "niewlasciwy zakres tablicy %s", $2);
				yyerror2(mess);
				YYERROR;
				break;
		}
	}
	| %empty
commands:
	commands command
	{
		struct Komenda *ptr = $1;
		while(ptr->Next != NULL) {
			ptr = ptr->Next;
		}
		ptr->Next = $2;
		$$ = $1;
	}
	| command
	{
		$$ = $1;
	}
command:
	identifier _prz expression _sre
	{
		$$ = GenerujKomende(0, $1, NULL, NULL, $3, NULL, NULL, NULL);
	}
	| _if condition _then commands _else commands _endif
	{
		$$ = GenerujKomende(1, NULL, NULL, NULL, NULL, $2, $4, $6);
	}
	| _if condition _then commands _endif
	{
		$$ = GenerujKomende(2, NULL, NULL, NULL, NULL, $2, $4, NULL);
	}
	| _while condition _do commands _endwhile
	{
		$$ = GenerujKomende(3, NULL, NULL, NULL, NULL, $2, $4, NULL);
	}
	|  _do commands _while condition _enddo
	{
		$$ = GenerujKomende(4, NULL, NULL, NULL, NULL, $4, $2, NULL);
	}
	| _for pidentifier _from value _to value _do commands _endfor
	{
		$$ = GenerujKomende(5, GenerujZmienna(2, $2, NULL, yylineno), $4, $6, NULL, NULL, $8, NULL);
	}
	| _for pidentifier _from value _downto value _do commands _endfor
	{
		$$ = GenerujKomende(6, GenerujZmienna(2, $2, NULL, yylineno), $4, $6, NULL, NULL, $8, NULL);
	}
	| _read identifier _sre
	{
		$$ = GenerujKomende(7, $2, NULL, NULL, NULL, NULL, NULL, NULL);
	}
	| _write value _sre
	{
		$$ = GenerujKomende(8, $2, NULL, NULL, NULL, NULL, NULL, NULL);
	}
expression:
	value
	{
		$$ = GenerujWyrazenie(0, $1, NULL);
	}
	| value _dod value
	{
		$$ = GenerujWyrazenie(1, $1, $3);
	}
	| value _ode value
	{
		$$ = GenerujWyrazenie(2, $1, $3);
	}
	| value _mno value
	{
		$$ = GenerujWyrazenie(3, $1, $3);
	}
	| value _dzi value
	{
		$$ = GenerujWyrazenie(4, $1, $3);
	}
	| value _mod value
	{
		$$ = GenerujWyrazenie(5, $1, $3);
	}
condition:
	value _row value
	{
		$$ = GenerujWarunek(0, $1, $3);
	}
	| value _roz value
	{
		$$ = GenerujWarunek(1, $1, $3);
	}
	| value _mni value
	{
		$$ = GenerujWarunek(2, $1, $3);
	}
	| value _wie value
	{
		$$ = GenerujWarunek(3, $1, $3);
	}
	| value _nwi value
	{
		$$ = GenerujWarunek(4, $1, $3);
	}
	| value _nmn value
	{
		$$ = GenerujWarunek(5, $1, $3);
	}
value:
	number
	{
		$$ = GenerujZmienna(3, $1, NULL, yylineno);
	}
	| identifier
	{
		$$ = $1;
	}
identifier:
	pidentifier
	{
		$$ = GenerujZmienna(0, $1, NULL, yylineno);
	}
	 | pidentifier _na0 pidentifier _na1
	 {
	 	$$ = GenerujZmienna(1, $1, GenerujZmienna(0, $3, NULL, yylineno), yylineno);
	 }
	 | pidentifier _na0 number _na1
	 {
	 	$$ = GenerujZmienna(1, $1, GenerujZmienna(3, $3, NULL, yylineno), yylineno);
	 }
%%

void yyerror2(const char *fmt) {
	printf("Blad w linii %d: %s \n", yylineno, fmt);
	exit(1);
}

void yyerror(const char *fmt, ...) {
	printf("Blad w linii %d: niewlasciwy znak \'%s\'\n", yylineno, yytext);
	exit(1);
}

int main(int argc, char const *argv[]) {
	FILE *data = fopen(argv[1], "r");
	dataToSave = fopen(argv[2], "w");
	yyset_in(data);
	yyparse();

}

struct Deklaracja *SzukajDeklaracji(char *id) {
	if(Dek == NULL) {
		return NULL;
	}
	struct Deklaracja *result = Dek;
	while(result != NULL) {
		if(strcmp(result->Id, id) == 0)	{
			return result;
		}
		result = result->Next;
	}
	return NULL;
}

int Deklaruj(int typ, char *id, long long rozmiar) {
	struct Deklaracja *ptr = SzukajDeklaracji(id);
	if(ptr != NULL) {
		return -1;
	}
	struct Deklaracja *result = malloc(sizeof(struct Deklaracja));
	result->Typ = typ;
	result->Rozmiar = rozmiar;
	result->Inicjowana = result->Pozycja = 0;
	result->Id = malloc(sizeof(char) * (strlen(id) + 1));
	result->Next = NULL;
	strcpy(result->Id, id);
	if(Dek == NULL) {
		Dek = result;
	} else {
		ptr = Dek;
		while(ptr->Next != NULL) {
			ptr = ptr->Next;
		}
		ptr->Next = result;
	}
	return 0;
}

int DeklarujTab(int typ, char *id, long long rod, long long rdo) {
	struct Deklaracja *ptr = SzukajDeklaracji(id);
	if(ptr != NULL) {
		return -1;
	}
	if(rdo < rod) {
		return -2;
	}
	struct Deklaracja *result = malloc(sizeof(struct Deklaracja));
	result->Typ = typ;
	result->Od = rod;
	result->Rozmiar =  rdo  - rod + 1;
	result->Inicjowana = result->Pozycja = 0;
	result->Id = malloc(sizeof(char) * (strlen(id) + 1));
	result->Next = NULL;
	strcpy(result->Id, id);
	if(Dek == NULL) {
		Dek = result;
	} else {
		ptr = Dek;
		while(ptr->Next != NULL) {
			ptr = ptr->Next;
		}
		ptr->Next = result;
	}
	return 0;
}

int DeklarujFor(char *id) {
	struct Deklaracja *ptr = SzukajDeklaracji(id);
	if(ptr != NULL) {
		return -1;
	}
	struct Deklaracja *result = malloc(sizeof(struct Deklaracja));
	result->Typ = 2;
	result->Rozmiar = 0;
	result->Inicjowana = 1;
	result->Pozycja = PamiecNaObliczenia + AktualneZagniezdzenie * 2;
	result->Id = malloc(sizeof(char) * (strlen(id) + 1));
	result->Next = NULL;
	strcpy(result->Id, id);
	AktualneZagniezdzenie++;
	LiczbaPetli = LiczbaPetli < AktualneZagniezdzenie ? AktualneZagniezdzenie : LiczbaPetli;
	if(Dek == NULL) {
		Dek = result;
	} else {
		ptr = Dek;
		while(ptr->Next != NULL) {
			ptr = ptr->Next;
		}
		ptr->Next = result;
	}
	return 0;
}

void UsunDeklaracjeFor(char *id) {
	if(Dek == NULL) {
		return;
	}
	AktualneZagniezdzenie--;
	if(strcmp(Dek->Id, id) == 0) {
		Dek = Dek->Next;
	} else {
		struct Deklaracja *ptr = Dek;
		while(ptr->Next != NULL) {
			if(strcmp(ptr->Next->Id, id) == 0) {
				ptr->Next = ptr->Next->Next;
				return;
			}
			ptr = ptr->Next;
		}
	}
}

struct Zmienna *GenerujZmienna(int typ, char *id, struct Zmienna *element, int linia) {
	struct Zmienna *result = malloc(sizeof(struct Zmienna));
	result->Typ = typ;
	result->Id = malloc(sizeof(char) * (strlen(id) + 1));
	strcpy(result->Id, id);
	result->Element = element;
	result->Linia = linia;
	return result;
}

struct Warunek *GenerujWarunek(int typ, struct Zmienna *z0, struct Zmienna *z1) {
	struct Warunek *result = malloc(sizeof(struct Warunek));
	result->Typ = typ;
	result->Z0 = z0;
	result->Z1 = z1;
	return result;
}

struct Wyrazenie *GenerujWyrazenie(int typ, struct Zmienna *z0, struct Zmienna *z1) {
	struct Wyrazenie *result = malloc(sizeof(struct Wyrazenie));
	result->Typ = typ;
	result->Z0 = z0;
	result->Z1 = z1;
	return result;
}

struct Komenda *GenerujKomende(int typ, struct Zmienna *z0, struct Zmienna *z1, struct Zmienna *z2, struct Wyrazenie *wy, struct Warunek *wa, struct Komenda *k0, struct Komenda *k1) {
	struct Komenda *result = malloc(sizeof(struct Komenda));
	result->Typ = typ;
	result->Z0 = z0;
	result->Z1 = z1;
	result->Z2 = z2;
	result->Wy = wy;
	result->Wa = wa;
	result->K0 = k0;
	result->K1 = k1;
	result->Next = NULL;
	return result;
}

int SprawdzZmienna(struct Zmienna *z0, int init) {
	if(z0->Typ == 3) {
		return 0;
	}
	struct Deklaracja *ptr = SzukajDeklaracji(z0->Id);
	if(ptr == NULL) {
		printf("Blad w linii %d: niezadeklarowana zmienna %s\n", z0->Linia, z0->Id);
		return -1;
	}
	switch(ptr->Typ) {
		case 0:
			if(z0->Typ == 1) {
				printf("Blad w linii %d: niewlasciwe uzycie zmiennej %s\n", z0->Linia, z0->Id);
				exit(-1);
			}
			break;
		case 1:
			if(z0->Typ != 1) {
				printf("Blad w linii %d: niewlasciwe uzycie zmiennej tablicowej %s\n", z0->Linia, z0->Id);
				exit(-1);
			}
			if(z0->Element->Typ == 3) {
				if(ptr->Rozmiar + ptr->Od < atoll(z0->Element->Id)) {
					printf("Blad w linii %d: niewlasciwy zakres tablicy %s\n", z0->Linia, z0->Id);
					exit(-1);
				}
				if(ptr->Od > atoll(z0->Element->Id)) {
					printf("Blad w linii %d: niewlasciwy zakres tablicy %s\n", z0->Linia, z0->Id);
					exit(-1);
				}
			} else {
				if(SprawdzZmienna(z0->Element, 1) != 0) {
					return -1;
				}
			}
			break;
		case 2:
			if(z0->Typ == 1) {
				printf("Blad w linii %d: niewlasciwe uzycie zmiennej %s\n", z0->Linia, z0->Id);
				exit(-1);
			}
			if(init == 0) {
				printf("Blad w linii %d: modyfikacja iteratora petli %s\n", z0->Linia, z0->Id);
				exit(-1);
			}
			return 0;
			break;
	}
	if (init == 0) {
		ptr->Inicjowana = 1;
	} else if(ptr->Inicjowana == 0) {
		printf("Blad w linii %d: uzycie niezainicjowanej zmiennej %s\n", z0->Linia, z0->Id);
		exit(-1);
	}
	return 0;
}

int Sprawdz(struct Komenda *k) {
	struct Komenda *ptr = k;
	while(ptr != NULL) {
		switch(ptr->Typ) {
			case 0:
				if((SprawdzZmienna(ptr->Z0, 0) + (ptr->Wy->Typ == 0 ? SprawdzZmienna(ptr->Wy->Z0, 1) : (SprawdzZmienna(ptr->Wy->Z0, 1) + SprawdzZmienna(ptr->Wy->Z1, 1))) ) != 0) {
					return -1;
				}
				break;
			case 1: case 2:	case 3:
				if((SprawdzZmienna(ptr->Wa->Z0, 1) + SprawdzZmienna(ptr->Wa->Z1, 1) + Sprawdz(ptr->K0) + Sprawdz(ptr->K1)) != 0) {
					return -1;
				}
				break;
			case 4:
				if(Sprawdz(ptr->K0) + SprawdzZmienna(ptr->Wa->Z0, 1) + SprawdzZmienna(ptr->Wa->Z1, 1) != 0) {
					return -1;
				}
				break;
			case 5: case 6:
				if(DeklarujFor(ptr->Z0->Id) != 0) {
					printf("Blad w linii %d: zmienna jest juz zadeklarowana %s\n", ptr->Z0->Linia, ptr->Z0->Id);
					return -1;
				}
				if((SprawdzZmienna(ptr->Z1, 1) + SprawdzZmienna(ptr->Z2, 1) + Sprawdz(ptr->K0)) != 0) {
					return -1;
				}
				UsunDeklaracjeFor(ptr->Z0->Id);
				break;
			case 7:
				if(SprawdzZmienna(ptr->Z0, 0) != 0) {
					return -1;
				}
				break;
			case 8:
				if(SprawdzZmienna(ptr->Z0, 1) != 0) {
					return -1;
				}
				break;
		}
		ptr = ptr->Next;
	}
	return 0;
}

void GenerujPozycje() {
	struct Deklaracja *ptr = Dek;
	long long i = PamiecNaObliczenia + LiczbaPetli * 2;
	while(ptr != NULL) {
		if(ptr->Typ == 0) {
			ptr->Pozycja = i++;
		} else {
			ptr->Pozycja = i;
			i += ptr->Rozmiar;
		}
		ptr = ptr->Next;
	}
}

struct Linia *NowaLinia(char *tekst) {
	if(Kol->First == NULL) {
		Kol->First = Kol->Last = malloc(sizeof(struct Linia));
	} else {
		Kol->Last->Next =  malloc(sizeof(struct Linia));
		Kol->Last = Kol->Last->Next;
	}
	Kol->Last->Next = NULL;
	Kol->Last->Tekst = malloc(sizeof(char) * 999);
	sprintf(Kol->Last->Tekst, "%s", tekst);
	Kol->Rozmiar++;
	return Kol->Last;
}

void NowaLiniaLiczba(char *tekst, long long liczba) {
	if(Kol->First == NULL) {
		Kol->First = Kol->Last = malloc(sizeof(struct Linia));
	} else {
		Kol->Last->Next =  malloc(sizeof(struct Linia));
		Kol->Last = Kol->Last->Next;
	}
	Kol->Last->Next = NULL;
	Kol->Last->Tekst = malloc(sizeof(char) * 999);
	Kol->Rozmiar++;
	sprintf(Kol->Last->Tekst, "%s %lld", tekst, liczba);
}

void EdytujLinie(struct Linia *l, char *tekst, long long liczba) {
	sprintf(l->Tekst, "%s %lld", tekst, liczba);
}

void KWyrazenie(struct Wyrazenie *w);
void KMnozenie(struct Wyrazenie *w);
void KDzielenie(struct Wyrazenie *w);

void KWarunek(struct Warunek *w);

void KLiczba(long long liczba);
void KWartosc(struct Zmienna *z);
void KAdres(struct Zmienna *z);

void KLiczba(long long liczba) {
	NowaLinia("SUB H H");
	if(liczba <= 0) {
		return;
	}
	int tab[999];
	int i = -1;
	while(liczba > 0) {
		tab[++i] = liczba % 2;
		liczba = liczba / 2;
	}
	NowaLinia("INC H");
	i--;
	for(i; i>=0; --i) {
		NowaLinia("ADD H H");
		if(tab[i]==1) {
			NowaLinia("INC H");
		}
	}
}

void KAdres(struct Zmienna *z) {
	struct Deklaracja * ptr = SzukajDeklaracji(z->Id);
	if(z->Typ == 1) {
		if(z->Element->Typ == 3) {
			KLiczba(ptr->Pozycja + atoll(z->Element->Id) - ptr->Od);
			return;
		} else {
			if(ptr->Pozycja >= ptr->Od) {
				KAdres(z->Element);
				NowaLinia("COPY A H");
				NowaLinia("LOAD G");
				KLiczba(ptr->Pozycja - ptr->Od);
				NowaLinia("ADD H G");
				return;
			} else {
				long long dec = ptr->Od - ptr->Pozycja;
				KAdres(z->Element);
				NowaLinia("COPY A H");
				NowaLinia("LOAD G");
				KLiczba(dec);
				NowaLinia("SUB G H");
				NowaLinia("COPY H G");
				return;
			}
		}
	}
	KLiczba(ptr->Pozycja);
	return;
}

void KWartosc(struct Zmienna *z) {
	if(z->Typ == 3) {
		KLiczba(atoll(z->Id));
	} else {
		KAdres(z);
		NowaLinia("COPY A H");
		NowaLinia("LOAD H");
	}
}

void KWarunek(struct Warunek *w) {
	long long pozycja;
	switch(w->Typ) {
		case 0: // =
			KWartosc(w->Z0);
			NowaLinia("COPY B H");
			KWartosc(w->Z1);
			NowaLinia("COPY C H");
			NowaLinia("COPY D H");
			NowaLinia("SUB H H");
			NowaLinia("SUB D B");
			pozycja = Kol->Rozmiar;
			NowaLiniaLiczba("JZERO D", pozycja + 2);
			NowaLiniaLiczba("JUMP", pozycja + 4);
			NowaLinia("SUB B C");
			NowaLiniaLiczba("JZERO B", pozycja + 5);
			NowaLinia("INC H");
			break;
		case 1: // !=
			KWartosc(w->Z0);
			NowaLinia("COPY B H");
			KWartosc(w->Z1);
			NowaLinia("COPY C H");
			NowaLinia("COPY D H");
			NowaLinia("SUB H H");
			NowaLinia("SUB D B");
			pozycja = Kol->Rozmiar;
			NowaLiniaLiczba("JZERO D", pozycja + 2);
			NowaLiniaLiczba("JUMP", pozycja + 6);
			NowaLinia("SUB B C");
			NowaLiniaLiczba("JZERO B", pozycja + 5);
			NowaLiniaLiczba("JUMP", pozycja + 6);
			NowaLinia("INC H");
			break;
		case 2: // <
			KWartosc(w->Z1);
			NowaLinia("COPY B H");
			KWartosc(w->Z0);
			NowaLinia("INC H");
			NowaLinia("SUB H B");
			break;
		case 3: // >
			KWartosc(w->Z0);
			NowaLinia("COPY B H");
			KWartosc(w->Z1);
			NowaLinia("INC H");
			NowaLinia("SUB H B");
			break;
		case 4: // <=
			KWartosc(w->Z1);
			NowaLinia("COPY B H");
			KWartosc(w->Z0);
			NowaLinia("SUB H B");
			break;
		case 5: // >=
			KWartosc(w->Z0);
			NowaLinia("COPY B H");
			KWartosc(w->Z1);
			NowaLinia("SUB H B");
			break;
	}
}

void KWyrazenie(struct Wyrazenie *w) {
	switch(w->Typ) {
		case 0:
			KWartosc(w->Z0);
			break;
		case 1:
			KWartosc(w->Z0);
			NowaLinia("COPY B H");
			KWartosc(w->Z1);
			NowaLinia("ADD H B");
			break;
		case 2:
			KWartosc(w->Z1);
			NowaLinia("COPY B H");
			KWartosc(w->Z0);
			NowaLinia("SUB H B");
			break;
		case 3:
			KMnozenie(w);
			break;
		case 4:
			KDzielenie(w);
			break;
		case 5:
			KDzielenie(w);
			NowaLinia("COPY H G");
			break;
	}
}

void KMnozenie(struct Wyrazenie *w) {
	KWartosc(w->Z0);
	NowaLinia("COPY B H");
	KWartosc(w->Z1);
	NowaLinia("COPY C H");
	NowaLinia("SUB H B");
	long long pozycja = Kol->Rozmiar;
	NowaLiniaLiczba("JZERO H", pozycja + 4);
	NowaLinia("COPY D B");
	NowaLinia("COPY B C");
	NowaLinia("COPY C D");
	NowaLinia("SUB H H");
	pozycja = Kol->Rozmiar;
	NowaLiniaLiczba("JZERO C", pozycja + 7);
	NowaLiniaLiczba("JODD C", pozycja + 3);
	NowaLiniaLiczba("JUMP", pozycja + 4);
	NowaLinia("ADD H B");
	NowaLinia("ADD B B");
	NowaLinia("HALF C");
	NowaLiniaLiczba("JUMP", pozycja);
}

void KDzielenie(struct Wyrazenie *w) {
	KWartosc(w->Z0);
	NowaLinia("COPY D H");
	KWartosc(w->Z1);
	NowaLinia("COPY C H");
	NowaLinia("SUB G G");
	NowaLinia("SUB H H");
	NowaLinia("SUB B B");
	long long pozycja = Kol->Rozmiar;
	NowaLiniaLiczba("JZERO C", pozycja + 25);
	NowaLiniaLiczba("JZERO D", pozycja + 25);
	NowaLinia("INC B");
	NowaLiniaLiczba("JZERO D", pozycja + 10);
	NowaLinia("ADD B B");
	NowaLiniaLiczba("JODD D", pozycja + 7);
	NowaLiniaLiczba("JUMP", pozycja + 8);
	NowaLinia("INC B");
	NowaLinia("HALF D");
	NowaLiniaLiczba("JUMP", pozycja + 3);
	NowaLinia("DEC B");
	NowaLiniaLiczba("JZERO B", pozycja + 25);
	NowaLinia("ADD G G");
	NowaLiniaLiczba("JODD B", pozycja + 15);
	NowaLinia("INC G");
	NowaLinia("INC B");
	NowaLinia("HALF B");
	NowaLinia("COPY F G");
	NowaLinia("INC F");
	NowaLinia("SUB F C");
	NowaLinia("ADD H H");
	NowaLiniaLiczba("JZERO F", pozycja + 10);
	NowaLinia("INC H");
	NowaLinia("SUB G C");
	NowaLiniaLiczba("JUMP", pozycja + 10);
}

void KompilujKomende(struct Komenda *k) {
	while(k != NULL) {
		int adres;
		struct Linia *l0, *l1;
		long long pozycja, forPozycja, pozycja2;
		switch(k->Typ) {
			case 0: //przypisanie
				KWyrazenie(k->Wy);
				NowaLinia("COPY B H");
				KAdres(k->Z0);
				NowaLinia("COPY A H");
				NowaLinia("STORE B");
				break;
			case 1: // if else
				KWarunek(k->Wa);
				l0 = NowaLinia("");
				KompilujKomende(k->K1);
				l1 = NowaLinia("");
				EdytujLinie(l0, "JZERO H", Kol->Rozmiar);
				KompilujKomende(k->K0);
				EdytujLinie(l1, "JUMP", Kol->Rozmiar);
				break;
			case 2: // if
				KWarunek(k->Wa);
				pozycja = Kol->Rozmiar;
				NowaLiniaLiczba("JZERO H", pozycja + 2);
				l0 = NowaLinia("");
				KompilujKomende(k->K0);
				EdytujLinie(l0, "JUMP", Kol->Rozmiar);
				break;
			case 3: // while
				pozycja = Kol->Rozmiar;
				KWarunek(k->Wa);
				NowaLiniaLiczba("JZERO H", Kol->Rozmiar + 2);
				l0 = NowaLinia("");
				KompilujKomende(k->K0);
				NowaLiniaLiczba("JUMP", pozycja);
				EdytujLinie(l0, "JUMP", Kol->Rozmiar);
				break;
			case 4: // do while
				pozycja = Kol->Rozmiar;
				KompilujKomende(k->K0);
				KWarunek(k->Wa);
				NowaLiniaLiczba("JZERO H", pozycja);
				break;
			case 5: // for
				DeklarujFor(k->Z0->Id);
				forPozycja = SzukajDeklaracji(k->Z0->Id)->Pozycja;
				KWartosc(k->Z1);
				NowaLinia("COPY E H");
				KLiczba(forPozycja);
				NowaLinia("COPY D H");
				NowaLinia("COPY A H");
				NowaLinia("STORE E");
				KWartosc(k->Z2);
				NowaLinia("INC D");
				NowaLinia("COPY A D");
				NowaLinia("STORE H");
				pozycja = Kol->Rozmiar;
				KLiczba(forPozycja);
				NowaLinia("COPY A H");
				NowaLinia("LOAD B");
				NowaLinia("INC A");
				NowaLinia("LOAD C");
				NowaLinia("INC C");
				NowaLinia("SUB C B");
				l0 = NowaLinia("");
				KompilujKomende(k->K0);
				KLiczba(forPozycja);
				NowaLinia("COPY A H");
				NowaLinia("LOAD B");
				NowaLinia("INC B");
				NowaLinia("STORE B");
				NowaLiniaLiczba("JUMP", pozycja);
				EdytujLinie(l0, "JZERO C", Kol->Rozmiar);
				UsunDeklaracjeFor(k->Z0->Id);
				break;
			case 6: // downtofor
				DeklarujFor(k->Z0->Id);
				forPozycja = SzukajDeklaracji(k->Z0->Id)->Pozycja;
				KWartosc(k->Z1);
				NowaLinia("COPY E H");
				NowaLinia("INC E");
				KLiczba(forPozycja);
				NowaLinia("COPY D H");
				NowaLinia("COPY A H");
				NowaLinia("STORE E");
				KWartosc(k->Z2);
				NowaLinia("INC D");
				NowaLinia("COPY A D");
				NowaLinia("STORE H");
				pozycja = Kol->Rozmiar;
				KLiczba(forPozycja);
				NowaLinia("COPY A H");
				NowaLinia("LOAD B");
				NowaLinia("COPY D B");
				NowaLinia("INC A");
				NowaLinia("LOAD C");
				NowaLinia("SUB B C");
				l0 = NowaLinia("");
				NowaLinia("DEC D");
				NowaLinia("DEC A");
				NowaLinia("STORE D");
				KompilujKomende(k->K0);
				NowaLiniaLiczba("JUMP", pozycja);
				EdytujLinie(l0, "JZERO B", Kol->Rozmiar);
				UsunDeklaracjeFor(k->Z0->Id);
				break;
			case 7: // pobierz
				NowaLinia("GET B");
				KAdres(k->Z0);
				NowaLinia("COPY A H");
				NowaLinia("STORE B");
			  break;
			case 8: // wyslij
				KWartosc(k->Z0);
				NowaLinia("PUT H");
			  break;
		}
		k = k->Next;
	}
}

void Kompiluj(struct Komenda *k) {
	Kol = malloc(sizeof(struct KolejkaLinia));
	Kol->First = NULL;
	Kol->Last = NULL;
	Kol->Rozmiar = 0;
	GenerujPozycje();
	KompilujKomende(k);
	struct Linia *ptr = Kol->First;
	while(ptr !=NULL) {
		fprintf(dataToSave, "%s\n", ptr->Tekst);
		ptr = ptr->Next;
	}
	fprintf(dataToSave, "HALT\n");
	fclose(dataToSave);
}
